// Generated by view binder compiler. Do not edit!
package com.example.sumte.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.sumte.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySearchResultBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout searchResultAdjustmentsLl;

  @NonNull
  public final ConstraintLayout searchResultAllCl;

  @NonNull
  public final ImageView searchResultArrowLeftIv;

  @NonNull
  public final TextView searchResultDate;

  @NonNull
  public final TextView searchResultPeople;

  @NonNull
  public final RecyclerView searchResultRv;

  @NonNull
  public final LinearLayout searchResultSearchBar;

  @NonNull
  public final LinearLayout searchResultSpecific;

  @NonNull
  public final TextView searchText;

  private ActivitySearchResultBinding(@NonNull ConstraintLayout rootView,
      @NonNull LinearLayout searchResultAdjustmentsLl, @NonNull ConstraintLayout searchResultAllCl,
      @NonNull ImageView searchResultArrowLeftIv, @NonNull TextView searchResultDate,
      @NonNull TextView searchResultPeople, @NonNull RecyclerView searchResultRv,
      @NonNull LinearLayout searchResultSearchBar, @NonNull LinearLayout searchResultSpecific,
      @NonNull TextView searchText) {
    this.rootView = rootView;
    this.searchResultAdjustmentsLl = searchResultAdjustmentsLl;
    this.searchResultAllCl = searchResultAllCl;
    this.searchResultArrowLeftIv = searchResultArrowLeftIv;
    this.searchResultDate = searchResultDate;
    this.searchResultPeople = searchResultPeople;
    this.searchResultRv = searchResultRv;
    this.searchResultSearchBar = searchResultSearchBar;
    this.searchResultSpecific = searchResultSpecific;
    this.searchText = searchText;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySearchResultBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySearchResultBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_search_result, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySearchResultBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.search_result_adjustments_ll;
      LinearLayout searchResultAdjustmentsLl = ViewBindings.findChildViewById(rootView, id);
      if (searchResultAdjustmentsLl == null) {
        break missingId;
      }

      ConstraintLayout searchResultAllCl = (ConstraintLayout) rootView;

      id = R.id.search_result_arrow_left_iv;
      ImageView searchResultArrowLeftIv = ViewBindings.findChildViewById(rootView, id);
      if (searchResultArrowLeftIv == null) {
        break missingId;
      }

      id = R.id.search_result_date;
      TextView searchResultDate = ViewBindings.findChildViewById(rootView, id);
      if (searchResultDate == null) {
        break missingId;
      }

      id = R.id.search_result_people;
      TextView searchResultPeople = ViewBindings.findChildViewById(rootView, id);
      if (searchResultPeople == null) {
        break missingId;
      }

      id = R.id.search_result_rv;
      RecyclerView searchResultRv = ViewBindings.findChildViewById(rootView, id);
      if (searchResultRv == null) {
        break missingId;
      }

      id = R.id.search_result_search_bar;
      LinearLayout searchResultSearchBar = ViewBindings.findChildViewById(rootView, id);
      if (searchResultSearchBar == null) {
        break missingId;
      }

      id = R.id.search_result_specific;
      LinearLayout searchResultSpecific = ViewBindings.findChildViewById(rootView, id);
      if (searchResultSpecific == null) {
        break missingId;
      }

      id = R.id.search_text;
      TextView searchText = ViewBindings.findChildViewById(rootView, id);
      if (searchText == null) {
        break missingId;
      }

      return new ActivitySearchResultBinding((ConstraintLayout) rootView, searchResultAdjustmentsLl,
          searchResultAllCl, searchResultArrowLeftIv, searchResultDate, searchResultPeople,
          searchResultRv, searchResultSearchBar, searchResultSpecific, searchText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
